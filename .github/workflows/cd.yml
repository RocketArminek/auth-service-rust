name: Rust auth api deployment

on:
  workflow_dispatch: ~
  push:
    paths:
      - "src/**"
      - "Cargo.toml"
      - "Dockerfile"
      - "tests/**"
      - "migrations/**"
      - ".github/workflows/cd.yml"
    branches:
      - "main"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: rocketarminek/auth-api-rust

jobs:
  dist-cache:
    runs-on: ubuntu-20.04
    name: "Prepare production docker image"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |-
            type=raw,value=test-latest
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          target: server
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache,mode=max

  prepare:
    runs-on: ubuntu-22.04
    name: "Download vendors & Build tests"
    timeout-minutes: 10
    outputs:
      cache-hit: ${{ steps.restore-build.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Restore cached dependencies
        id: restore-build
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            target/debug/deps
            target/debug/build
            target/debug/.fingerprint
            target/debug/.cargo-lock
            target/debug/incremental
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock', 'src/**', 'tests/**') }}

      - name: Setup vendored dependencies
        if: steps.restore-build.outputs.cache-hit != 'true'
        run: |
          echo "CACHE HIT"
          echo ${{steps.restore-build.outputs.cache-hit}}
          cargo vendor

      - name: Build tests
        if: steps.restore-build.outputs.cache-hit != 'true'
        run: cargo test --no-run

      - name: Save cache
        if: steps.restore-build.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            vendor
            target/debug/deps
            target/debug/build
            target/debug/.fingerprint
            target/debug/.cargo-lock
            target/debug/incremental
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock', 'src/**', 'tests/**') }}

  test-acceptance:
    needs:
      - prepare
    runs-on: ubuntu-22.04
    name: "Running acceptance tests"
    timeout-minutes: 3
    strategy:
      matrix:
        db:
          - engine: "sqlite"
            url: "sqlite://test.db"
          - engine: "mysql"
            url: "mysql://root:toor@127.0.0.1:3306/auth_service_test"
            service: "mysql:8.4"
          - engine: "mysql"
            url: "mysql://root:toor@127.0.0.1:3306/auth_service_test"
            service: "mysql:8.0"
        rabbitmq:
          - version: "4"
          - version: "3"
    services:
      rabbit:
        image: rabbitmq:${{matrix.rabbitmq.version}}-management
        ports:
          - 5672:5672
        options: >-
          --health-cmd="rabbitmq-diagnostics check_port_connectivity"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --health-start-period=30s
      mysql:
        image: ${{ (matrix.db.service) && matrix.db.service || '' }}
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: toor
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -ptoor"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --health-start-period=30s
    env:
      DATABASE_ENGINE: ${{ matrix.db.engine }}
      DATABASE_URL: ${{ matrix.db.url }}
      RABBITMQ_URL: amqp://127.0.0.1:5672
      RABBITMQ_EXCHANGE_AUTO_DELETE: true
      RABBITMQ_EXCHANGE_DURABLE: false
      RABBITMQ_EXCHANGE_NAME: nebula.auth.test
      SECRET: secret
      PASSWORD_HASHING_SCHEME: bcrypt_low
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Restore cached dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            target/debug/deps
            target/debug/build
            target/debug/.fingerprint
            target/debug/.cargo-lock
            target/debug/incremental
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock', 'src/**', 'tests/**') }}
      - name: Run tests
        run: cargo test

  performance-test:
    needs:
      - test-acceptance
    runs-on: ubuntu-22.04
    name: "Running k6 performance tests"
    timeout-minutes: 20
    services:
      mysql:
        image: mysql:8.4
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: toor
          MYSQL_DATABASE: auth_service_test
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -ptoor"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --health-start-period=30s
      rabbit:
        image: rabbitmq:4-management
        ports:
          - 5672:5672
        options: >-
          --health-cmd="rabbitmq-diagnostics check_port_connectivity"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --health-start-period=30s
      app:
        image: ghcr.io/rocketarminek/auth-api-rust:test-latest
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 8080:8080
        env:
          DATABASE_URL: mysql://root:toor@mysql:3306/auth_service_test
          PASSWORD_HASHING_SCHEME: bcrypt_low
          SECRET: secret
          RABBITMQ_URL: amqp://rabbit:5672
          VERIFICATION_REQUIRED: false
          EVENT_DRIVEN: true
        options: >-
          --health-cmd="app check-dependencies"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --health-start-period=20s
    steps:
      - uses: actions/checkout@v4
      - name: Install k6
        run: |
          curl https://github.com/grafana/k6/releases/download/v0.49.0/k6-v0.49.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1
          sudo cp k6 /usr/local/bin
      - name: Run k6 auth flow test
        run: k6 run tests/performance/scenarios/auth_flow.js --throw
      - name: Run k6 admin test
        run: k6 run tests/performance/scenarios/admin.js --throw
      - name: Run k6 spike test
        run: k6 run tests/performance/scenarios/spike.js --throw

  publish-server-image:
    runs-on: ubuntu-20.04
    name: "Publish server image"
    needs:
      - test-acceptance
      - performance-test
      - dist-cache
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |-
            type=sha,enable=true,priority=100,prefix=,suffix=,format=long
            type=raw,value=latest
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          target: server
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
