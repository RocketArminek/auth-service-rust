name: Rust auth api deployment

on:
  workflow_dispatch: ~
  push:
    paths:
      - "src/**"
      - "Cargo.toml"
      - "Dockerfile"
      - "tests/**"
      - "migrations/**"
      - ".github/workflows/cd.yml"
    branches:
      - "main"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: rocketarminek/auth-api-rust

jobs:
  dist-cache:
    runs-on: ubuntu-20.04
    name: "Dist cache"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          target: server
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache,mode=max

  publish-test-image:
    runs-on: ubuntu-20.04
    name: "Publish test image"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |-
            type=raw,value=test-latest
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          target: test
          platforms: linux/amd64
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-cache,mode=max

# Until finding the infrastructure
#  plan:
#    runs-on: ubuntu-20.04
#    name: "Validate & plan cluster changes"
#    steps:
#      - uses: actions/checkout@v3
#      - uses: hashicorp/setup-terraform@v2
#        with:
#          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
#      - run: |
#          mkdir ${HOME}/.kube
#          echo ${{ secrets.KUBE_CONFIG_OBRZEZNA_1 }} | base64 --decode > ${HOME}/.kube/config
#          cd .ops/terraform
#          terraform init
#          terraform validate
#          terraform plan -var="app_docker_image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" -var="aws_access_key=${{secrets.AWS_ACCESS_KEY_4E}}" -var="aws_secret_access_key=${{secrets.AWS_SECRET_ACCESS_KEY_4E}}" -lock=false

  prepare:
    runs-on: ubuntu-22.04
    name: "Download vendors & Build tests"
    timeout-minutes: 10
    outputs:
      cache-hit: ${{ steps.restore-build.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Restore cached dependencies
        id: restore-build
        uses: actions/cache/restore@v4
        with:
          path: |
            vendor
            target/debug/deps
            target/debug/build
            target/debug/.fingerprint
            target/debug/.cargo-lock
            target/debug/incremental
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', 'src/**', 'tests/**') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: Setup vendored dependencies
        if: steps.restore-build.outputs.cache-hit != 'true'
        run: |
          echo "CACHE HIT"
          echo ${{steps.restore-build.outputs.cache-hit}}
          cargo vendor

      - name: Build tests
        if: steps.restore-build.outputs.cache-hit != 'true'
        run: cargo test --no-run

      - name: Save cache
        if: steps.restore-build.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            vendor
            target/debug/deps
            target/debug/build
            target/debug/.fingerprint
            target/debug/.cargo-lock
            target/debug/incremental
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', 'src/**', 'tests/**') }}

  test2:
    needs:
      - prepare
    runs-on: ubuntu-22.04
    name: "Running tests"
    timeout-minutes: 3
    strategy:
      matrix:
        rabbitmq:
          - version: "4"
          - version: "3"
        db:
          - engine: "sqlite"
            url: "sqlite://test.db"
          - engine: "mysql"
            url: "mysql://root:toor@localhost:3306/auth_service_test"
            service: "mysql:8.4"
          - engine: "mysql"
            url: "mysql://root:toor@localhost:3306/auth_service_test"
            service: "mysql:8.0"
    services:
      rabbit:
        image: rabbitmq:${{matrix.rabbitmq.version}}-management
      mysql:
        image: ${{ (matrix.db.service) && matrix.db.service || '' }}
        env:
          MYSQL_ROOT_PASSWORD: toor
    env:
      DATABASE_ENGINE: ${{ matrix.db.engine }}
      DATABASE_URL: ${{ matrix.db.url }}
      RABBITMQ_URL: amqp://localhost:5672
      RABBITMQ_EXCHANGE_AUTO_DELETE: true
      RABBITMQ_EXCHANGE_DURABLE: false
      RABBITMQ_EXCHANGE_NAME: nebula.auth.test
      SECRET: secret
      PASSWORD_HASHING_SCHEME: bcrypt_low
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Restore cached dependencies
        uses: actions/cache/restore@v3
        with:
          path: |
            vendor
            target/debug/deps
            target/debug/build
            target/debug/.fingerprint
            target/debug/.cargo-lock
            target/debug/incremental
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', 'src/**', 'tests/**') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-
      - name: Wait for services
        run: sleep 10
      - name: Run tests
        run: cargo test

  tests:
    strategy:
      matrix:
        db:
          - engine: "sqlite"
            url: "sqlite://test.db"
          - engine: "mysql"
            url: "mysql://root:toor@mysql:3306/auth_service_test"
    runs-on: ubuntu-latest
    name: "Run tests"
    timeout-minutes: 3
    needs:
      - publish-test-image
    container:
      image: ghcr.io/rocketarminek/auth-api-rust:test-latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      env:
        DATABASE_ENGINE: ${{ matrix.db.engine }}
        DATABASE_URL: ${{ matrix.db.url }}
        RABBITMQ_URL: amqp://rabbit:5672
        RABBITMQ_EXCHANGE_AUTO_DELETE: true
        RABBITMQ_EXCHANGE_DURABLE: false
        RABBITMQ_EXCHANGE_NAME: nebula.auth.test
        SECRET: secret
        PASSWORD_HASHING_SCHEME: bcrypt_low
    services:
      rabbit:
        image: rabbitmq:3-management
      mysql:
        image: ${{ (matrix.db.engine == 'mysql') && 'mysql:8.0' || '' }}
        env:
          MYSQL_ROOT_PASSWORD: toor
          MYSQL_DATABASE: auth_service_test
    steps:
      - name: Wait for Services
        run: sleep 10
      - name: Run tests
        run: |
          cd /app
          cargo test

  publish-server-image:
    runs-on: ubuntu-20.04
    name: "Publish server image"
    needs:
      - tests
      - dist-cache
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |-
            type=sha,enable=true,priority=100,prefix=,suffix=,format=long
            type=raw,value=latest
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          target: server
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache

# Until finding the infrastructure
#  terraform-apply:
#    runs-on: ubuntu-latest
#    name: "Deploy"
#    needs: [ "plan", "publish-server-image" ]
#    steps:
#      - uses: actions/checkout@v3
#      - uses: hashicorp/setup-terraform@v2
#        with:
#          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
#      - run: |
#          mkdir ${HOME}/.kube
#          echo ${{ secrets.KUBE_CONFIG_OBRZEZNA_1 }} | base64 --decode > ${HOME}/.kube/config
#          cd .ops/terraform
#          terraform init
#          terraform apply -auto-approve -var="app_docker_image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" -var="aws_access_key=${{secrets.AWS_ACCESS_KEY_4E}}" -var="aws_secret_access_key=${{secrets.AWS_SECRET_ACCESS_KEY_4E}}" -lock-timeout=10m
