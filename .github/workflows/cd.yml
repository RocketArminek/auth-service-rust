name: Rust auth api deployment

on:
  workflow_dispatch: ~
  push:
    paths:
      - "src/**"
      - "Cargo.toml"
      - "Dockerfile"
      - "tests/**"
      - "migrations/**"
      - ".github/workflows/cd.yml"
    branches:
      - "main"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: rocketarminek/auth-api-rust

jobs:
  publish-test-image:
    runs-on: ubuntu-20.04
    name: "Publish test image"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |-
            type=raw,value=test-latest
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          target: test-builder
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-latest
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-latest,mode=max

  plan:
    runs-on: ubuntu-20.04
    name: "Validate & plan cluster changes"
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - run: |
          mkdir ${HOME}/.kube
          echo ${{ secrets.KUBE_CONFIG_OBRZEZNA_1 }} | base64 --decode > ${HOME}/.kube/config
          cd .ops/terraform
          terraform init
          terraform validate
          terraform plan -var="app_docker_image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" -lock=false

  tests:
    runs-on: ubuntu-latest
    name: "Run tests"
    needs:
      - publish-test-image
    container:
      image: ghcr.io/rocketarminek/auth-api-rust:187c826aa885e24766baf48ddaeeb4dd1a6d6421
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.ARMINEK_READ_ONLY_TOKEN }}
      env:
        DATABASE_URL: mysql://root:toor@mysql:3306/auth_service_dev
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: toor
        ports:
          - 3306:3306
    steps:
      - name: init database
        run: sqlx database create
      - name: Run tests
        run: cargo test --all

  publish-server-image:
    runs-on: ubuntu-20.04
    name: "Publish server image"
    timeout-minutes: 10
#    needs:
#      - tests
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |-
            type=sha,enable=true,priority=100,prefix=,suffix=,format=long
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          target: server
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,mode=max

  terraform-apply:
    runs-on: ubuntu-latest
    name: "Deploy"
    needs: [ "plan", "publish-server-image" ]
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - run: |
          mkdir ${HOME}/.kube
          echo ${{ secrets.KUBE_CONFIG_OBRZEZNA_1 }} | base64 --decode > ${HOME}/.kube/config
          cd .ops/terraform
          terraform init
          terraform apply -auto-approve -var="app_docker_image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" -lock-timeout=10m
